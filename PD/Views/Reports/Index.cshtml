
<div class="col-md-4">
    <div>
        <h3>Department</h3>
        <div>
            <select id="ui-dept"
                    asp-items='new SelectList(@ViewBag.Departments, "Id", "Name")'
                    onchange="loadBudgetInfo();">
                <option value="0" selected="selected">All</option>
            </select>
        </div>
    </div>
    <div>
        <h3>Position Types</h3>
        <div class="pd-check-bulk-control">
            Select:
            <input type="checkbox" id="pos-types-all" onchange="setChecked('ui-position-type', true);" /> All &nbsp;&nbsp;
            <input type="checkbox" id="pos-types-none" onchange="setChecked('ui-position-type', false);" /> None
        </div>
        @foreach (string str in ViewBag.PositionTypes)
        {
            var id = str.Replace(" ", "");
            <div>
                <input class="ui-position-type"
                       type="checkbox"
                       id="@id"
                       name="@id"
                       value="@str"
                       checked="checked"
                       onchange="loadBudgetInfo();" />
                <label for="@id">@str</label>
            </div>
        }
    </div>

    <div>
        <h3>Budget Components</h3>
        <div class="pd-check-bulk-control">
            Select:
            <input type="checkbox" id="budget-comp-all" onchange="setChecked('ui-budget-component', true);" /> All &nbsp;&nbsp;
            <input type="checkbox" id="budget-comp-none" onchange="setChecked('ui-budget-component', false);" /> None
        </div>
        @foreach (string str in ViewBag.BudgetComponent)
        {
            var id = str.Replace(" ", "");
            <div>
                <input class="ui-budget-component"
                       type="checkbox"
                       id="@id"
                       name="@id"
                       value="@str"
                       checked="checked"
                       onchange="loadBudgetInfo();" />
                <label for="@id">@str</label>
            </div>
        }
    </div>
</div>

<div class="col-md-8">
    <h3>Budget</h3>
    <canvas id="canvas"></canvas>
</div>

<div class="clear"></div>
<script>
    var dispConfig = {};

    $(function () {
        dispConfig.from = '2015-07-01';
        dispConfig.to = '2019-06-30';
        dispConfig.stepInMonths = 6;

        loadBudgetInfo();
    });

    function setChecked(cssClass, status) {
        $('.' + cssClass).prop('checked', status);
        loadBudgetInfo();
    }

    function loadBudgetInfo() {
        var dept = $('#ui-dept').val();

        var budgetOptions = [];
        var allBudgetOptionsSelected = true;
        var noBudgetOptionsSelected = true;
        $('.ui-budget-component').each(function () {
            if ($(this).prop('checked')) {
                budgetOptions.push($(this).val());
                noBudgetOptionsSelected = false;
            }
            else {
                allBudgetOptionsSelected = false;
            }
        });
        $('#budget-comp-all').prop('checked', allBudgetOptionsSelected);
        $('#budget-comp-none').prop('checked', noBudgetOptionsSelected);

        var positionTypes = [];
        var allPositionTypesSelected = true;
        var noPositionTypesSelected = true;
        $('.ui-position-type').each(function () {
            if ($(this).prop('checked')) {
                positionTypes.push($(this).val());
                noPositionTypesSelected = false;
            }
            else {
                allPositionTypesSelected = false;
            }
        });
        $('#pos-types-all').prop('checked', allPositionTypesSelected);
        $('#pos-types-none').prop('checked', noPositionTypesSelected);


        $.ajax({
            url: '/api/budget/?from=' + dispConfig.from
                + '&to=' + dispConfig.to
                + '&stepInMonths=' + dispConfig.stepInMonths
                + '&deptId=' + dept
                + '&budgetOptions=' + budgetOptions
                + '&positionTypes=' + positionTypes,
            type: "get",
            contentType: "application/json",
            dataType: "json",
            success: function (data, status, jqXHR) {
                plotBudget(data);
            },
            error: function (jqXHR, status, err) {
                console.error(err);
            },
        });
    }

    function plotBudget(data) {
        var n = data.length;
        var budget = data.map(x => x.budget);
        var positionCount = data.map(x => x.positionCount);
        var xLabels = data.map(x => x.date.substr(0, 10));

        var lineChartData = {
            labels: xLabels,
            datasets: [{
                label: 'Budget',
                borderColor: window.chartColors.red,
                backgroundColor: window.chartColors.red,
                fill: false,
                steppedLine: true,
                data: budget,
                yAxisID: 'y-axis-1'
            }, {
                label: 'Active Position Count',
                borderColor: window.chartColors.blue,
                backgroundColor: window.chartColors.blue,
                fill: false,
                steppedLine: true,
                data: positionCount,
                yAxisID: 'y-axis-2'
            }]
        };


        var ctx = document.getElementById('canvas').getContext('2d');
        window.myLine = Chart.Line(ctx, {
            data: lineChartData,
            options: {
                responsive: true,
                hoverMode: 'index',
                stacked: false,
                title: {
                    display: false,
                    text: 'Chart.js Line Chart - Multi Axis'
                },
                tooltips: {
                    callbacks: {
                        label: function (tooltipItem, data) {
                            var tips = [];
                            var label = data.datasets[tooltipItem.datasetIndex].label || '';
                            if (label) {
                                label += ': ';
                            }

                            if (tooltipItem.datasetIndex == 0) {
                                //This is the budget data

                                label += currencyString(tooltipItem.yLabel);
                                tips.push(label);
                                if (tooltipItem.index > 0) {
                                    budgetVals = data.datasets[0].data;
                                    var diff = Math.round(budgetVals[tooltipItem.index] - budgetVals[tooltipItem.index - 1]);
                                    if (diff != 0)
                                        tips.push("Difference: " + currencyString(diff));
                                }
                            }
                            else {
                                label += tooltipItem.yLabel;
                                tips.push(label);
                            }
                            return tips;
                        }
                    }
                },
                scales: {
                    yAxes: [{
                        type: 'linear', // only linear but allow scale type registration. This allows extensions to exist solely for log scale for instance
                        display: true,
                        position: 'left',
                        id: 'y-axis-1',
                        ticks: {
                            // Include a dollar sign and group by thouands in the ticks
                            callback: function (value, index, values) {
                                return currencyString(value);
                            }
                        }
                    }, {
                        type: 'linear', // only linear but allow scale type registration. This allows extensions to exist solely for log scale for instance
                        display: true,
                        position: 'right',
                        id: 'y-axis-2',

                        // grid line settings
                        gridLines: {
                            drawOnChartArea: false, // only want the grid lines for one axis to show up
                        },
                    }],
                }
            }
        })
    }

    function currencyString(value) {
        return (value < 0 ? '-$' : '$') + Math.abs(value).toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
    }
</script>

