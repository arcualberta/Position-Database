
<div class="col-md-8">
    <canvas id="canvas"></canvas>
</div>
<div class="col-md-4">
    <div>
        <input type="radio" id="total" name="graph-selection" value="total" />
        <label for="total">Total Budget</label>
    </div>
    <div>
        <input type="radio" id="salaries" name="graph-selection" value="salaries" />
        <label for="salaries">Salaries</label>
    </div>
    <div>
        <input type="radio" id="merit" name="graph-selection" value="merit" />
        <label for="merit">Merits</label>
    </div>
    <div>
        <input type="radio" id="atb" name="graph-selection" value="atb" />
        <label for="atb">Contract Settlements</label>
    </div>
    <div>
        <input type="radio" id="adjustments" name="graph-selection" value="adjustments" />
        <label for="adjustments">Adjustments</label>
    </div>

</div>
<div class="clear"></div>
<script>
    $(function () {
        loadBudgetInfo('2015-07-01', '2019-06-30', 6);
    });

    function loadBudgetInfo(from, to, stepInMonths, deptId) {
        if (deptId == undefined)
            deptId = "";

        $.ajax({
            url: '/api/budget/?from=' + from + '&to=' + to + '&stepInMonths=' + stepInMonths + '&deptId=' + deptId,
            type: "get",
            contentType: "application/json",
            dataType: "json",
            success: function (data, status, jqXHR) {
                plotBudget(data);
            },
            error: function (jqXHR, status, err) {
                console.error(err);
            },
        });
    }

    function plotBudget(data) {
        var n = data.length;
        var budget = data.map(x => x.budget);
        var positionCount = data.map(x => x.positionCount);
        var xLabels = data.map(x => x.date.substr(0, 10));

        var lineChartData = {
            labels: xLabels,
            datasets: [{
                label: 'Budget',
                borderColor: window.chartColors.red,
                backgroundColor: window.chartColors.red,
                fill: false,
                steppedLine: true,
                data: budget,
                yAxisID: 'y-axis-1'
            }, {
                label: 'Active Position Count',
                borderColor: window.chartColors.blue,
                backgroundColor: window.chartColors.blue,
                fill: false,
                steppedLine: true,
                data: positionCount,
                yAxisID: 'y-axis-2'
            }]
        };


        var ctx = document.getElementById('canvas').getContext('2d');
        window.myLine = Chart.Line(ctx, {
            data: lineChartData,
            options: {
                responsive: true,
                hoverMode: 'index',
                stacked: false,
                title: {
                    display: true,
                    text: 'Chart.js Line Chart - Multi Axis'
                },
                tooltips: {
                    callbacks: {
                        label: function (tooltipItem, data) {
                            var tips = [];
                            var label = data.datasets[tooltipItem.datasetIndex].label || '';
                            if (label) {
                                label += ': ';
                            }

                            if (tooltipItem.datasetIndex == 0) {
                                //This is the budget data

                                label += currencyString(tooltipItem.yLabel);
                                tips.push(label);
                                if (tooltipItem.index > 0) {
                                    budgetVals = data.datasets[0].data;
                                    var diff = Math.round(budgetVals[tooltipItem.index] - budgetVals[tooltipItem.index - 1]);
                                    if (diff != 0)
                                        tips.push("Difference: " + currencyString(diff));
                                }
                            }
                            else {
                                label += tooltipItem.yLabel;
                                tips.push(label);
                            }
                            return tips;
                        }
                    }
                },
                scales: {
                    yAxes: [{
                        type: 'linear', // only linear but allow scale type registration. This allows extensions to exist solely for log scale for instance
                        display: true,
                        position: 'left',
                        id: 'y-axis-1',
                        ticks: {
                            // Include a dollar sign and group by thouands in the ticks
                            callback: function (value, index, values) {
                                return currencyString(value);
                            }
                        }
                    }, {
                        type: 'linear', // only linear but allow scale type registration. This allows extensions to exist solely for log scale for instance
                        display: true,
                        position: 'right',
                        id: 'y-axis-2',

                        // grid line settings
                        gridLines: {
                            drawOnChartArea: false, // only want the grid lines for one axis to show up
                        },
                    }],
                }
            }
        })
    }

    function currencyString(value) {
        return (value < 0 ? '-$' : '$') + Math.abs(value).toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
    }
</script>

