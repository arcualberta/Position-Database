<h2>People</h2>

@*
    Child rows in tables: https://datatables.net/examples/api/row_details.html
*@
<div id="peoplePanel" class="col-sm-6 pd-panel">
    <div class="panel panel-default">
        <div class="panel-heading">Employees</div>
        <div class="panel-body">
            <table id="peopleTable" class="display" style="width:100%">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Employee Id</th>
                    </tr>
                </thead>
            </table>
        </div>
    </div>
</div>
<div class="col-sm-6 pd-panel">
    <h4 id="personDetailsHead">Select an employee from the list.</h4>
    <div id="personInfo">
    </div>
</div>
<div class="clear"></div>
<script>
    $(function () {

        // peopleTable - initialization
        $('#peopleTable').dataTable({
            select: {
                style: 'single'
            },
            "iDisplayLength": 100,
            "sPaginationType": "full_numbers",
            processing: true,
            serverSide: true,
            info: false,
            "scrollY": "400px",
            "scrollCollapse": true,
            ajax: {
                url: '/api/people',
                type: "post",
                contentType: "application/json",
                data: function (d) {
                    // note: d is created by datatable, the structure of d is the same with DataTableParameters model above
                    //console.log(d);
                    return JSON.stringify(d);
                }
                ////DEBUG: Enable the following "success" handler to show data on the console instead of on the table.
                //, success: function (response) { console.log(response); res = response; }
            },
            "columns": [
                { "data": "name" },
                { "data": "empId" }
            ],
            rowId: "id"
        }); //ENDS: $('#peopleTable').dataTable({ xxx

        // peopleTable - on selection of a row
        var peopleTable = $('#peopleTable').DataTable();
        peopleTable.on('select', function (e, dt, type, indexes) {
            if (type === 'row') {
                var id = peopleTable.rows(indexes).data().pluck('id')[0];
                var name = peopleTable.rows(indexes).data().pluck('name')[0]
                //console.log(id);

                $('#personDetailsHead').html(name);

                loadPositionInfo(id)
            }
        }); //ENDs: peopleTable.on('select, xxx

        peopleTable.on('deselect', function (e, dt, type, indexes) {
            if (type === 'row') {
                $('#personDetailsHead').html('Select an employee from the list.');
                $('#personInfo').html('');
            }
        }); //ENDs: peopleTable.on('deselect, xxx
    }); //ENDS: $(function () { xxxx

    // This method is invoked when a person is selected from the people table
    function loadPositionInfo(personId) {

        $.ajax({
            url: '/api/people/' + personId,
            type: "get",
            contentType: "application/json",
            dataType: "json",
            success: function (data, status, jqXHR) {
                //Sorting data such that the latest position is shown first.
                data.sort((a, b) => a.startDate < b.startDate ? 1 : -1)
                showPositionInfo(data);
            },
            error: function (jqXHR, status, err) {
                console.error(err);
            },
        });
    }

    function showPositionInfo(data) {
        $('#personInfo').html('');
        $.each(data, function (idx, pos) {
            var panel = createPositionPanel(pos);
            $('#personInfo').append(panel);
        });
    }

    function createPositionPanel(posAssignment) {
        var panel = $('<div class="panel panel-default"></div>');
        panel.attr('id', 'pa-' + posAssignment.id);

        var panelHeading = $('<div class="panel-heading"><b>' + posAssignment.position.title + '</b> | <span>' + posAssignment.position.primaryDepartment.name + '</span></div>');
        panel.append(panelHeading);

        var buttonPanel = createPositionHeaderButtonPanel(posAssignment.id);
        panelHeading.append(buttonPanel);

        var panelBody = $('<div class="panel-body"></div>')
        panel.append(panelBody);

        var timeDelimitedGroups = [];

        //Iterating through all compensations and creating a list of time-delimited panels. Each panel
        //lists all compensation types applicable to that time interval along with their propoerty details.
        $.each(posAssignment.compensations, function (idx, comp) {
            var start = comp.startDate == undefined ? "" : comp.startDate.substr(0, 10);
            var stop = comp.endDate == undefined ? "" : comp.endDate.substr(0, 10);
            var key = start + ' to ' + stop; //key used to uniquely identify a time-delimited panel
            var yearRange = start.substr(0, 4) + ' - ' + stop.substr(0, 4);

            //taking the correct time-delimited panel for this compensation object
            var matchedCompensation = timeDelimitedGroups.find(x => x.interval === key)

            //Creating a new panel and adding it to the array of panels if it hasn't been created yet.
            if (matchedCompensation == undefined) {
                matchedCompensation = { interval: key, data: [], start: start, stop: stop };

                matchedCompensation.panel = $('<div class="panel panel-default pd-inner-panel"></div>');

                var compensationPanelHead = $('<div class="panel-heading"><b>' + yearRange + '</b></div>');
                matchedCompensation.panel.append(compensationPanelHead);

                var btnPanel = createCompensationButtonPanel(posAssignment.id, comp.startDate, comp.endDate);
                compensationPanelHead.append(btnPanel);

                var panelBodyId = compensationPanelId(start, stop);
                matchedCompensation.panel.append($('<div class="panel-body" id="' + panelBodyId +'"></div>'));
                timeDelimitedGroups.push(matchedCompensation);
            }

            matchedCompensation.data.push(comp);
        });

        //Sorting time intervals in the reverse chronological order.
        timeDelimitedGroups.sort((a, b) => (a.interval < b.interval) ? 1 : -1);

        $.each(timeDelimitedGroups, function (key, item) {
            panel.append(item.panel);
            var container = $(item.panel).children('.panel-body');
            updateCompensationPanelContent(item.data, item.start, item.stop, container);
        });

        return panel;
    }

    function compensationPanelId(beginDate, endDate) {
        return 'compensation-panel_' + beginDate.substr(0, 10) + '_' + endDate.substr(0, 10);
    }
   
    function updateCompensationPanelContent(compensations, start, stop, container, successMessages, errorMessages) {
        if (container == undefined) {

            var panelId = compensationPanelId(start, stop);
            container = $('#' + panelId);
        }

        $(container).empty();

        $.each(compensations, function (idx, comp) {
            var compensationType = comp.$type;
            compensationType = compensationType.substr(0, compensationType.lastIndexOf(','));
            compensationType = compensationType.substr(compensationType.lastIndexOf('.') + 1);
            var indicator = comp.isProjection ? "<span style='color:red'>*</span>" : "";
            switch (compensationType) {
                case "Salary":
                    container.append($('<div>Salary: $' + comp.value.toLocaleString("en") + indicator + '</div>'));
                    if (comp.manualOverride > 0) {
                        container.append($('<div>Salary Override: $' + comp.manualOverride.toLocaleString("en") + '</div>'));
                    }
                    break;
                case "Adjustment":
                    container.append($('<div>' + comp.name + ': $' + comp.value.toLocaleString("en") + indicator + '</div>'));
                    break;
                case "ContractSettlement":
                    container.append($('<div>ATB: $' + comp.value.toLocaleString("en") + indicator + '</div>'));
                    break;
                case "Merit":
                    container.append($('<div>Merit Decision: ' + comp.meritDecision + indicator + '</div>'));
                    container.append($('<div>Merit: $' + comp.value.toLocaleString("en") + indicator + '</div>'));
                    break;
                default:
                    container.append($('<div>' + comp.name + ': $' + comp.value.toLocaleString("en") + indicator + '</div>'));
                    break;
            }
        });

        if (errorMessages != undefined && errorMessages.length > 0) {
            var info = $('<div class="alert alert-danger fade in"></div>');
            info.append($('<a href="#" class="close" data-dismiss="alert" aria-label="close">&times;</a>'));
            container.append(info);
            $.each(errorMessages, function (idx, message) {
                info.append($('<div>' + message + '</div>'));
            });
        }
        else {
            if (successMessages != undefined) {
                if (successMessages.length == 0)
                    successMessages.push("success ...");

                var info = $('<div class="alert alert-success"></div>');
                info.append($('<a href="#" class="close" data-dismiss="alert" aria-label="close">&times;</a>'));
                container.append(info);
                $.each(successMessages, function (idx, message) {
                    info.append($('<div>' + message + '</div>'));
                });
            }
        }
    }

    function createCompensationButtonPanel(paId, compStartDate, compEndDate) {
        var panel = $("<span class='pd-panel-header-action-panel'></span>");
        var btn = $('<button/>', {
            text: 'calculate',
            click: function () {
                computeComensation(paId, compStartDate, compEndDate);
            }
        });
      
        panel.append(btn);
        return panel;
    }

    function computeComensation(paId, compStartDate, compEndDate) {
        $.ajax({
            url: '/api/compensations/compute/' + paId + '/' + compStartDate + '/' + compEndDate,
            type: "post",
            contentType: "application/json",
            dataType: "json",
            success: function (result, status, jqXHR) {
                updateCompensationPanelContent(
                    result.data,
                    compStartDate,
                    compEndDate, 
                    null,
                    result.successes,
                    result.errors);
            },
            error: function (jqXHR, status, err) {
                console.error(err);
            },
        });
    }

    function createPositionHeaderButtonPanel(paId) {
        var panel = $("<span class='pd-panel-header-action-panel'></span>");
        var btn = $('<button/>', {
            text: 'add year',
            click: function () {
                addCompensationYear(paId);
            }
        });

        panel.append(btn);
        return panel;
    }

    function addCompensationYear(paId) {
        $.ajax({
            url: '/api/compensations/addyear/' + paId,
            type: "post",
            contentType: "application/json",
            dataType: "json",
            success: function (result, status, jqXHR) {
                updateCompensationPanelContent(
                    result.data,
                    compStartDate,
                    compEndDate, 
                    null,
                    result.successes,
                    result.errors);
            },
            error: function (jqXHR, status, err) {
                console.error(err);
            },
        });
    }
</script>
